var GL;
var program;
var VBO;
var UVB;
var CBO;
var NBO;
var EBO;
var envmap = 1;
var normalmapping = 1;
var g_normalsOffset;
var g_texCoordsOffset;
var g_binormalsOffset;
var g_tangentsOffset;
var camPos = 0;
var deltaTime;
var rotation;
var rotSpeed = 1.0;
var cubemap, texture;
var model = new Float32Array(16);
var view = new Float32Array(16);
var projection = new Float32Array(16);
var matrix = new Float32Array(16);
var direccion = new Array(3);
var arriba = new Array(3);

(function(){main();});

function main()
{
	var WebGL = document.getElementById("WebGL");

  	var style = WebGL.style;
	style.marginLeft = "auto";
	style.marginRight = "auto";
	var parentStyle = WebGL.parentElement.style;
	parentStyle.textAlign = "center";
	parentStyle.width = "100%";

	GL = WebGL.getContext("experimental-webgl");

	program = initShaders(fragment, vertex);
	prepararVBO(triangulo);

	cubemap = loacubemap();
	texture = loadTexture("Resources/Texturas/box2.jpg");
	texture2 = loadTexture("Resources/Texturas/box3.jpg");
	texture3 = loadTexture("Resources/Texturas/box4.jpg");
	prepararMatrices();


	requestAnimationFrame(draw);
	var then = 0;
	var yrot, xrot, zrot;
	var rot = 0.0;
	
	function draw(now)
	{

	camPos = document.getElementById("Range");
	now *= 0.001;
	deltaTime = now - then;
	then = now;

	GL.useProgram(program);

		GL.enable(GL.DEPTH_TEST);
    		GL.uniformMatrix4fv(GL.getUniformLocation(program, "matrix"), GL.FALSE,matrix);
		var model = new Float32Array(16);
		model = Identity();
console.log(camPos);
				rot += deltaTime;
				yrot = makeYRotation((rotSpeed) * rot);
				xrot = makeXRotation(degToRad(270));
				zrot = makeZRotation((rotSpeed) * rot);
				var translation = makeTranslation(-camPos.value+50, -camPos.value+50, -camPos.value+50);
				model = matrixMultiply(model, xrot);
				model = matrixMultiply(model, yrot);
				//model = matrixMultiply(model, zrot);
				model = matrixMultiply(model, translation);
				GL.uniformMatrix4fv(GL.getUniformLocation(program, "model"), GL.FALSE,model);
				var transInvModel = model;
				transInvModel = makeInverse(transInvModel);
				transInvModel = transpose(transInvModel);
				GL.uniformMatrix4fv(GL.getUniformLocation(program, "transInvModel"), GL.FALSE,transInvModel);
				GL.uniform3f(GL.getUniformLocation(program, "viewPos"),posicion[0], posicion[1],posicion[2]);
				GL.uniform3f(GL.getUniformLocation(program, "viewDir"),direccion[0], direccion[1],direccion[2]);
				GL.uniform1i(GL.getUniformLocation(program, "envmap"),envmap);
				GL.uniform1i(GL.getUniformLocation(program, "normalmapping"),normalmapping);
		GL.viewport(0,0,GL.drawingBufferWidth, GL.drawingBufferHeight);
		GL.clearColor(0, 0, 0, 1.0);
		GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);


		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, cubemap);
		GL.uniform1i(GL.getUniformLocation(program, "cubemap"),0);
		GL.activeTexture(GL.TEXTURE1);
		GL.bindTexture(GL.TEXTURE_2D, texture);
		GL.uniform1i(GL.getUniformLocation(program, "sampler"),1);
		GL.activeTexture(GL.TEXTURE2);
		GL.bindTexture(GL.TEXTURE_2D, texture2);
		GL.uniform1i(GL.getUniformLocation(program, "sampler2"),2);
		GL.activeTexture(GL.TEXTURE3);
		GL.bindTexture(GL.TEXTURE_2D, texture3);
		GL.uniform1i(GL.getUniformLocation(program, "sampler3"),3);

		GL.bindBuffer(GL.ARRAY_BUFFER, VBO);

    		GL.vertexAttribPointer(0, 3, GL.FLOAT, false, 0, 0);
    		GL.enableVertexAttribArray(0);
    		GL.vertexAttribPointer(1, 3, GL.FLOAT, false, 0, g_normalsOffset);
		GL.enableVertexAttribArray(1);
    		GL.vertexAttribPointer(2, 3, GL.FLOAT, false, 0, g_texCoordsOffset);
    		GL.enableVertexAttribArray(2);
    		GL.vertexAttribPointer(3, 3, GL.FLOAT, false, 0, g_binormalsOffset);
    		GL.enableVertexAttribArray(3);
    		GL.vertexAttribPointer(4, 3, GL.FLOAT, false, 0, g_tangentsOffset);
    		GL.enableVertexAttribArray(4);
		GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, EBO);

		GL.drawElements(GL.TRIANGLES, teapotIndices.length, GL.UNSIGNED_SHORT, 0);

		window.requestAnimationFrame(draw);
}

}
function updatePosition()
{
		camPos = document.getElementById("Range");
}

function showEnvMap()
{
envmap = !envmap;
}

function showNormalMapping()
{
normalmapping = !normalmapping;
}

function prepararVBO(triangulo)
{
	VBO = GL.createBuffer();

    	GL.bindBuffer(GL.ARRAY_BUFFER, VBO);
    	GL.bufferData(GL.ARRAY_BUFFER,
                  teapotPositions.byteLength +
                  teapotNormals.byteLength +
                  teapotTexCoords.byteLength +
                  teapotBinormals.byteLength +
                  teapotTangents.byteLength,
                  GL.STATIC_DRAW);

    	g_normalsOffset = teapotPositions.byteLength;
    	g_texCoordsOffset = g_normalsOffset + teapotNormals.byteLength;
    	g_binormalsOffset = g_texCoordsOffset + teapotTexCoords.byteLength;
    	g_tangentsOffset = g_binormalsOffset + teapotBinormals.byteLength;
    	GL.bufferSubData(GL.ARRAY_BUFFER, 0, teapotPositions);
    	GL.bufferSubData(GL.ARRAY_BUFFER, g_normalsOffset, teapotNormals);
    	GL.bufferSubData(GL.ARRAY_BUFFER, g_texCoordsOffset, teapotTexCoords);
    	GL.bufferSubData(GL.ARRAY_BUFFER, g_binormalsOffset, teapotBinormals);
    	GL.bufferSubData(GL.ARRAY_BUFFER, g_tangentsOffset, teapotTangents);

    	EBO = GL.createBuffer();
	GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, EBO);
	GL.bufferData(GL.ELEMENT_ARRAY_BUFFER, teapotIndices, GL.STATIC_DRAW);

    	GL.enableVertexAttribArray(0);
    	GL.enableVertexAttribArray(1);
    	GL.enableVertexAttribArray(2);

}

function loadTexture(path)
{
	var texture = GL.createTexture();
	if(!texture)
	{
		alert("No se pudo crear la textura");
		return;
	}

	var image = new Image();
	if(!image)
	{
			alert("no se pudo crear la imagen");
			return;
	}
	image.crossOrigin = "Anonymous";
	image.src = path;
image.onload = function(){
GL.activeTexture(GL.TEXTURE0);
GL.bindTexture(GL.TEXTURE_2D, texture);

GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_LINEAR);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_S, GL.REPEAT);
GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_T, GL.REPEAT);
GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, GL.RGBA, GL.UNSIGNED_BYTE, image);
GL.generateMipmap(GL.TEXTURE_2D);
}


return texture;

}

function loacubemap()
{
	var texture = GL.createTexture();
	if(!texture)
	{
		alert("No se pudo crear la textura");
		return;
	}

	var image = new Image();
	image.crossOrigin = "Anonymous";
	image.src = "Resources/skybox/right.jpg";
	image.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 0, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	var image2 = new Image();
	image2.crossOrigin = "Anonymous";
	image2.src = "Resources/skybox/left.jpg";
	image2.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 1, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image2);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	var image3 = new Image();
	image3.crossOrigin = "Anonymous";
	image3.src = "Resources/skybox/top.jpg";
	image3.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 2, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image3);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	var image4 = new Image();
	image4.crossOrigin = "Anonymous";
	image4.src = "Resources/skybox/bottom.jpg";
	image4.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 3, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image4);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	var image5 = new Image();
	image5.crossOrigin = "Anonymous";
	image5.src = "Resources/skybox/back.jpg";
	image5.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 4, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image5);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	var image6 = new Image();
	image6.crossOrigin = "Anonymous";
	image6.src = "Resources/skybox/front.jpg";
	image6.onload = function(){
		GL.activeTexture(GL.TEXTURE0);
		GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
		GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + 5, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image6);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
    		GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_WRAP_R, GL.CLAMP_TO_EDGE);

	};

	return texture;
}

function loadcubeimage(i, texture, image)
{
	GL.activeTexture(GL.TEXTURE0);
	GL.bindTexture(GL.TEXTURE_CUBE_MAP, texture);
	GL.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X + i, null, GL.RGB, GL.RGB, GL.UNSIGNED_BYTE, image);
	GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MAG_FILTER, GL.LINEAR);
	GL.texParameteri(GL.TEXTURE_CUBE_MAP, GL.TEXTURE_MIN_FILTER, GL.LINEAR);
}


function loadShader(type, shaderSrc) {

    var shader = GL.createShader(type);
    GL.shaderSource(shader, shaderSrc);
    GL.compileShader(shader);
    if (!GL.getShaderParameter(shader, GL.COMPILE_STATUS) &&
        !GL.isContextLost()) {
        var infoLog = GL.getShaderInfoLog(shader);
        alert("Error compiling shader:\n" + infoLog);
        GL.deleteShader(shader);
        return null;
    }
    return shader;
}

function initShaders(fragment, vertex) {
    var vertexShader = loadShader(GL.VERTEX_SHADER, vertex);
    var fragmentShader = loadShader(GL.FRAGMENT_SHADER, fragment);
    var programObject = GL.createProgram();
    GL.attachShader(programObject, vertexShader);
    GL.attachShader(programObject, fragmentShader);
    GL.bindAttribLocation(programObject, 0, "position");
    GL.bindAttribLocation(programObject, 1, "normal");
    GL.bindAttribLocation(programObject, 2, "uvs");
    GL.bindAttribLocation(programObject, 3, "binormal");
    GL.bindAttribLocation(programObject, 4, "tangent");
    GL.linkProgram(programObject);
    var linked = GL.getProgramParameter(programObject, GL.LINK_STATUS);
    if (!linked && !GL.isContextLost()) {
        var infoLog = GL.getProgramInfoLog(programObject);
        alert("Error linking program:\n" + infoLog);
        GL.deleteProgram(programObject);
        return;
    }
    return programObject;
}
function prepararMatrices()
{
	model = Identity();
	view = Identity();
	projection = Identity();

	direccion = [0.0, 20.0, 0.0];
	posicion = [70.0, 80.0, 70.0];
	var cameraMatrix = Identity();
	//cameraMatrix = makeTranslation(posicion[0], posicion[1], posicion[2]);
	var yrot = makeYRotation(degToRad(0));
	cameraMatrix = makeLookAt(posicion, direccion, [0,1,0]);//matrixMultiply(cameraMatrix, yrot);
	var invView = makeInverse(cameraMatrix);
	var projection = makePerspective(degToRad(45), GL.drawingBufferWidth / GL.drawingBufferHeight, 0.1, 2000);
	matrix = makeTranslation(0, 0, 0);//makeLookAt([1, 1, 1], posicion, [0,1,0]);
	matrix = matrixMultiply(matrix, invView);
  	matrix = matrixMultiply(matrix, projection);

}
function subtractVectors(a, b) {
  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
}

function sumVectors(a, b)
{
	return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
}

function makeTranslation(tx, ty, tz) {
  return [
     1,  0,  0,  0,
     0,  1,  0,  0,
     0,  0,  1,  0,
    tx, ty, tz,  1
  ];
}

function makeYRotation(angleInRadians) {
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  return [
    c, 0, -s, 0,
    0, 1, 0, 0,
    s, 0, c, 0,
    0, 0, 0, 1
  ];
};
function makeXRotation(angleInRadians) {
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  return [
    1, 0, 0, 0,
    0, c, s, 0,
    0, -s, c, 0,
    0, 0, 0, 1
  ];
};
function makeZRotation(angleInRadians) {
  var c = Math.cos(angleInRadians);
  var s = Math.sin(angleInRadians);
  return [
     c, s, 0, 0,
    -s, c, 0, 0,
     0, 0, 1, 0,
     0, 0, 0, 1
  ];
}
function normalizar(v) {
  var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  var x =v[0] / length;
  var y =v[1] / length;
  var z =v[2] / length;
  if (length > 0.00001) {
    return [x, y, z];
  } else {
    return [0, 0, 0];
  }
}

function cross(a, b) {
  return [a[1] * b[2] - a[2] * b[1],
          a[2] * b[0] - a[0] * b[2],
          a[0] * b[1] - a[1] * b[0]];
}


function Identity()
{
	return [1,0,0,0,
		0,1,0,0,
		0,0,1,0,
		0,0,0,1];
}

function degToRad(d) {
    return d * Math.PI / 180;
  }


function dot(vec1, vec2)
{
return (vec1[0]*vec2[0] + vec1[1]*vec2[1] + vec1[2]*vec2[2])
}


function makePerspective(fieldOfViewInRadians, aspect, near, far) {
  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);
  var rangeInv = 1.0 / (near - far);
  return [
    f / aspect, 0, 0, 0,
    0, f, 0, 0,
    0, 0, (near + far) * rangeInv, -1,
    0, 0, near * far * rangeInv * 2, 0
  ];
};

function makeLookAt(cameraPosition, target, up) {
  var zAxis = normalizar(
      subtractVectors(cameraPosition, target));
  var xAxis = cross(up, zAxis);
  var yAxis = cross(zAxis, xAxis);
  return [
     xAxis[0], xAxis[1], xAxis[2], 0,
     yAxis[0], yAxis[1], yAxis[2], 0,
     zAxis[0], zAxis[1], zAxis[2], 0,
     cameraPosition[0],
     cameraPosition[1],
     cameraPosition[2],
     1];
}


function matrixMultiply(a, b) {
  var a00 = a[0*4+0];
  var a01 = a[0*4+1];
  var a02 = a[0*4+2];
  var a03 = a[0*4+3];
  var a10 = a[1*4+0];
  var a11 = a[1*4+1];
  var a12 = a[1*4+2];
  var a13 = a[1*4+3];
  var a20 = a[2*4+0];
  var a21 = a[2*4+1];
  var a22 = a[2*4+2];
  var a23 = a[2*4+3];
  var a30 = a[3*4+0];
  var a31 = a[3*4+1];
  var a32 = a[3*4+2];
  var a33 = a[3*4+3];
  var b00 = b[0*4+0];
  var b01 = b[0*4+1];
  var b02 = b[0*4+2];
  var b03 = b[0*4+3];
  var b10 = b[1*4+0];
  var b11 = b[1*4+1];
  var b12 = b[1*4+2];
  var b13 = b[1*4+3];
  var b20 = b[2*4+0];
  var b21 = b[2*4+1];
  var b22 = b[2*4+2];
  var b23 = b[2*4+3];
  var b30 = b[3*4+0];
  var b31 = b[3*4+1];
  var b32 = b[3*4+2];
  var b33 = b[3*4+3];
  return [a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,
          a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,
          a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,
          a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,
          a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,
          a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,
          a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,
          a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,
          a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,
          a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,
          a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,
          a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,
          a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,
          a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,
          a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,
          a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33];
}
function makeInverse(m) {
  var m00 = m[0 * 4 + 0];
  var m01 = m[0 * 4 + 1];
  var m02 = m[0 * 4 + 2];
  var m03 = m[0 * 4 + 3];
  var m10 = m[1 * 4 + 0];
  var m11 = m[1 * 4 + 1];
  var m12 = m[1 * 4 + 2];
  var m13 = m[1 * 4 + 3];
  var m20 = m[2 * 4 + 0];
  var m21 = m[2 * 4 + 1];
  var m22 = m[2 * 4 + 2];
  var m23 = m[2 * 4 + 3];
  var m30 = m[3 * 4 + 0];
  var m31 = m[3 * 4 + 1];
  var m32 = m[3 * 4 + 2];
  var m33 = m[3 * 4 + 3];
  var tmp_0  = m22 * m33;
  var tmp_1  = m32 * m23;
  var tmp_2  = m12 * m33;
  var tmp_3  = m32 * m13;
  var tmp_4  = m12 * m23;
  var tmp_5  = m22 * m13;
  var tmp_6  = m02 * m33;
  var tmp_7  = m32 * m03;
  var tmp_8  = m02 * m23;
  var tmp_9  = m22 * m03;
  var tmp_10 = m02 * m13;
  var tmp_11 = m12 * m03;
  var tmp_12 = m20 * m31;
  var tmp_13 = m30 * m21;
  var tmp_14 = m10 * m31;
  var tmp_15 = m30 * m11;
  var tmp_16 = m10 * m21;
  var tmp_17 = m20 * m11;
  var tmp_18 = m00 * m31;
  var tmp_19 = m30 * m01;
  var tmp_20 = m00 * m21;
  var tmp_21 = m20 * m01;
  var tmp_22 = m00 * m11;
  var tmp_23 = m10 * m01;
  var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
  var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
  var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
  var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
  return [
    d * t0,
    d * t1,
    d * t2,
    d * t3,
    d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),
    d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),
    d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),
    d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),
    d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),
    d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),
    d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),
    d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),
    d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),
    d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),
    d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),
    d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))
  ];
}

function transpose(a) {

return [a[0], a[4], a[8], a[12],
	a[1], a[5], a[9], a[13],
	a[2], a[6], a[10], a[14],
	a[3], a[7], a[11], a[15]];

}
